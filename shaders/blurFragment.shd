#version 450

layout (location=0) out vec4 output_color;

in vec2 UV;
uniform sampler2D renderedTexture;
uniform int width;
uniform int height;


const int kernel_size = 11;
const float blur_ratio = 10.f;
const float kernel[kernel_size] = { 0.090154, 0.090606, 0.090959, 0.091212, 0.091364, 0.091414, 0.091364, 0.091212, 0.090959, 0.090606, 0.090154 };

void main()
{

    vec4 color2 = texture(renderedTexture, UV);
    int window_size = kernel_size / 2;
    vec4 color = vec4(0., 0., 0., 0.);
    
    for (int i = 0; i < kernel_size; ++i)
    {
        vec2 temp = vec2(UV.x + float(i - window_size) * (blur_ratio / width), UV.y);
        if (temp.x < 0.f || temp.x >= 1.f)
            color += kernel[i] * texture(renderedTexture, UV);
        else
            color += kernel[i] * texture(renderedTexture, temp);
    }

    color2 = vec4(0., 0., 0., 0.);

    for (int i = 0; i < kernel_size; ++i)
    {
        if (i == 5)
            color2 += kernel[i] * color;
        else
        {
            vec2 temp = vec2(UV.x, UV.y + float(i - window_size) * (blur_ratio / height));
            if (temp.y < 0.f || temp.y >= 1.f)
                color2 += kernel[i] * texture(renderedTexture, UV);
            else
                color2 += kernel[i] * texture(renderedTexture, temp);
        }
    }

    output_color = vec4(color2);
    if (UV.y < 0.5)
        output_color = vec4(1.0,0.0,0.,0.);
}
